#    -*- mode: org -*-


Archived entries from file /home/sgj/.emacs.d/emacs-config/emacs-config.org


* Smart mode-line
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-01-16 Tue 09:48
  :ARCHIVE_FILE: ~/.emacs.d/emacs-config/emacs-config.org
  :ARCHIVE_CATEGORY: emacs-config
  :END:
#+BEGIN_SRC emacs-lisp 
(add-hook 'after-init-hook 'sml/setup)
#+END_SRC

* python-flycheck
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-01-18 Thu 23:27
  :ARCHIVE_FILE: ~/.emacs.d/emacs-config/emacs-config.org
  :ARCHIVE_CATEGORY: emacs-config
  :END:
#+BEGIN_SRC emacs-lisp
(require 'flycheck)
(global-flycheck-mode 1)
(with-eval-after-load 'flycheck
  (add-hook 'flycheck-mode-hook #'flycheck-pycheckers-setup))
#+END_SRC

#+RESULTS:
| flycheck-pycheckers-setup | flycheck-irony-setup | flycheck-mode-set-explicitly |


* helm-ros
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-01-19 Fri 10:37
  :ARCHIVE_FILE: ~/.emacs.d/emacs-config/emacs-config.org
  :ARCHIVE_CATEGORY: emacs-config
  :END:
#+BEGIN_SRC emacs-lisp
(require 'helm-ros)
#+END_SRC

* CMake automation with cmake-ide
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-05-25 Fri 16:33
  :ARCHIVE_FILE: ~/.emacs.d/emacs-config/emacs-config.org
  :ARCHIVE_CATEGORY: emacs-config
  :END:
#+BEGIN_SRC emacs-lisp
(cmake-ide-setup)
#+END_SRC

#+RESULTS:
: t


* Language Server mode (LSP)
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-05-27 Sun 23:04
  :ARCHIVE_FILE: ~/.emacs.d/emacs-config/emacs-config.org
  :ARCHIVE_CATEGORY: emacs-config
  :END:
#+BEGIN_SRC emacs-lisp
(require 'lsp-mode)
(require 'lsp-ui)
(add-hook 'lsp-mode-hook 'lsp-ui-mode)
;; (add-hook 'c++-mode-hook 'flycheck-mode )
#+END_SRC

#+RESULTS:
| lsp-ui-mode |


* smart-mode-line with powerline theme
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-05-27 Sun 23:26
  :ARCHIVE_FILE: ~/.emacs.d/emacs-config/emacs-config.org
  :ARCHIVE_CATEGORY: emacs-config
  :END:
#+BEGIN_SRC emacs-lisp
;; These two lines are just examples
(setq sml/no-confirm-load-theme t)
(setq powerline-arrow-shape 'curve)
(setq powerline-default-separator-dir '(right . left))
;; These two lines you really need.
(setq sml/theme 'powerline)
(sml/setup)
#+END_SRC

#+RESULTS:
: t


* Emacs Code Browser (ECB)
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-05-29 Tue 18:20
  :ARCHIVE_FILE: ~/.emacs.d/emacs-config/emacs-config.org
  :ARCHIVE_CATEGORY: emacs-config
  :END:
#+BEGIN_SRC emacs-lisp
 (add-to-list 'load-path 
 "/home/sgj/.emacs.d/elpa/ecb-master")
 (require 'ecb)

(setq semantic-load-turn-everything-on t)
(require 'semantic)
;; (global-semantic-show-dirty-mode -1)
;; (global-semantic-show-unmatched-syntax-mode -1)

;; ECB mini buffer completion not working fix - 
;; https://github.com/ecb-home/ecb/issues/10

(defun display-buffer-at-bottom--display-buffer-at-bottom-around (orig-fun &rest args)
"Bugfix for ECB: cannot use display-buffer-at-bottom', calldisplay-buffer-use-some-window' instead in ECB frame."
(if (and ecb-minor-mode (equal (selected-frame) ecb-frame))
(apply 'display-buffer-use-some-window args)
(apply orig-fun args)))
(advice-add 'display-buffer-at-bottom :around #'display-buffer-at-bottom--display-buffer-at-bottom-around)

#+END_SRC

#+RESULTS:


* C++ coding style
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-07-05 Thu 18:31
  :ARCHIVE_FILE: ~/.emacs.d/emacs-config/emacs-config.org
  :ARCHIVE_CATEGORY: emacs-config
  :END:
#+BEGIN_SRC emacs-lisp
;; C++ coding style
(setq
 c-default-style "ellemtel" ;; set style to "linux"
 )
(setq
 c++-default-style "ellemtel" ;; set style to "linux"
 )

;; automatically indent when press RET
(global-set-key (kbd "RET") 'newline-and-indent)

;; activate whitespace-mode to view all whitespace characters
(global-set-key (kbd "C-c w") 'whitespace-mode)

;; show unncessary whitespace that can mess up your diff
(add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 1)))

;; use space to indent by default
(setq-default indent-tabs-mode nil)

;; set appearance of a tab that is represented by 4 spaces
(setq-default tab-width 4)

;; Package: clean-aindent-mode
(require 'clean-aindent-mode)
(add-hook 'prog-mode-hook 'clean-aindent-mode)
(defun my-pkg-init()
   (electric-indent-mode -1)  ; no electric indent, auto-indent is sufficient
   (clean-aindent-mode t)
   (setq clean-aindent-is-simple-indent t)
   (define-key global-map (kbd "RET") 'newline-and-indent))
(add-hook 'after-init-hook 'my-pkg-init)

;; Package: dtrt-indent
;; A minor mode that guesses the indentation offset originally used
;; for creating source code files and transparently adjusts the corresponding
;; settings in Emacs, making it more convenient to edit foreign files.
(require 'dtrt-indent)
(dtrt-indent-mode 1)
(setq dtrt-indent-verbosity 0)

;; Package: ws-butler
(require 'ws-butler)
(add-hook 'c-mode-common-hook 'ws-butler-mode)
#+END_SRC

#+RESULTS:
| ws-butler-mode | google-set-c-style | my-flycheck-rtags-setup |

