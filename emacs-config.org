#+LaTeX_CLASS: koma-report
* AUCTex Config
#+BEGIN_SRC emacs-lisp
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
(setq TeX-PDF-mode t)
#+END_SRC

#+RESULTS:
: t

* Adding Melpa 
#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
;;(package-refresh-contents)
#+END_SRC

#+RESULTS:

* RTAGS Integration
#+BEGIN_SRC emacs-lisp
;; SOURCE - http://syamajala.github.io/c-ide.html
(require 'rtags)
(require 'company-rtags)

(setq rtags-completions-enabled t)
(eval-after-load 'company
  '(add-to-list
    'company-backends 'company-rtags))
(setq rtags-autostart-diagnostics t)
(rtags-enable-standard-keybindings)
#+END_SRC

#+RESULTS:
: rtags-location-stack-visualize

* Helm Integration
#+BEGIN_SRC emacs-lisp
;; SOURCE - http://syamajala.github.io/c-ide.html
(require 'helm-rtags)
(setq rtags-use-helm t)
#+END_SRC
* cmake-ide integration
#+BEGIN_SRC emacs-lisp
(cmake-ide-setup)
(setq cmake-ide-build-pool-dir "/home/sgj/.cmake-ide-build-pool")
(setq cmake-ide-build-pool-use-persistent-naming t)

#+END_SRC

#+RESULTS:
: t

* irony-mode integration
#+BEGIN_SRC emacs-lisp
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)

(defun my-irony-mode-hook ()
  (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async))

(add-hook 'irony-mode-hook 'my-irony-mode-hook)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
#+END_SRC

#+RESULTS:
| irony-cdb-autosetup-compile-options | my-irony-mode-hook |

* initialising company
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

#+RESULTS:
| global-company-mode | x-wm-set-size-hint | debian-ispell-set-default-dictionary | debian-ispell-set-startup-menu |

* company-irony TAB completion
#+BEGIN_SRC emacs-lisp
(setq company-idle-delay 0)
(define-key c-mode-map [(tab)] 'company-complete)
(define-key c++-mode-map [(tab)] 'company-complete)
#+END_SRC

#+RESULTS:
: company-complete

* Flycheck - syntax checking
#+BEGIN_SRC emacs-lisp
;; source - http://nilsdeppe.com/posts/emacs-c++-ide
;; Require flycheck to be present
(require 'flycheck)
;; Force flycheck to always use c++11 support. We use
;; the clang language backend so this is set to clang
(add-hook 'c++-mode-hook
          (lambda () (setq flycheck-clang-language-standard "c++11")))
;; Turn flycheck on everywhere
(global-flycheck-mode)

;; Use flycheck-pyflakes for python. Seems to work a little better.
;; (require 'flycheck-pyflakes)
(add-hook 'c-mode-hook 'flycheck-mode)
#+END_SRC

#+RESULTS:
| flycheck-mode | irony-mode | (lambda nil (easy-menu-add-item nil (quote (C)) (rtags-submenu-list))) |

* Integrating rtags with flycheck
#+BEGIN_SRC emacs-lisp
(require 'flycheck-rtags)
(defun my-flycheck-rtags-setup ()
  (flycheck-select-checker 'rtags)
  (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
  (setq-local flycheck-check-syntax-automatically nil))
;; c-mode-common-hook is also called by c++-mode
(add-hook 'c-mode-common-hook #'my-flycheck-rtags-setup)
#+END_SRC

#+RESULTS:
| my-flycheck-rtags-setup | google-set-c-style |

* Integrating irony with flycheck
#+BEGIN_SRC emacs-lisp
(eval-after-load 'flycheck
  '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
#+END_SRC

#+RESULTS:
| flycheck-irony-setup | flycheck-mode-set-explicitly |

* Adding monokai (similar to sublime)
#+BEGIN_SRC emacs-lisp
(load-theme 'monokai-alt t)
#+END_SRC 
* Projectile
#+BEGIN_SRC emacs-lisp 
(projectile-global-mode)
(setq projectile-completion-system 'helm)
(helm-projectile-on)
#+END_SRC
* Projectile with speedbar
#+BEGIN_SRC emacs-lisp 
(require 'projectile-speedbar)
#+END_SRC
* Neotree project browser
#+BEGIN_SRC emacs-lisp 
(require 'neotree)
#+END_SRC
* Neotree Projectile Integration
#+BEGIN_SRC emacs-lisp
  (defun neotree-project-dir ()
    "Open NeoTree using the git root."
    (interactive)
    (let ((project-dir (projectile-project-root))
          (file-name (buffer-file-name)))
      (neotree-toggle)
      (if project-dir
          (if (neo-global--window-exists-p)
              (progn
                (neotree-dir project-dir)
                (neotree-find file-name)))
        (message "Could not find git project root."))))
 (global-set-key [f8] 'neotree-project-dir)
#+END_SRC
* magit keyboard shortcuts
#+BEGIN_SRC emacs-lisp 
(global-set-key (kbd "M-g M-s") 'magit-status)
(global-set-key (kbd "M-g M-c") 'magit-checkout)
#+END_SRC
* cmake-ide shortcuts
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c m") 'cmake-ide-compile)
#+END_SRC
* rtags Config & Diagnostics disabled
#+BEGIN_SRC emacs-lisp
;;(setq rtags-autostart-diagnostics t)
(rtags-diagnostics)
(setq rtags-completions-enabled t)
(rtags-enable-standard-keybindings)
#+END_SRC
* make opening headers fast 
#+BEGIN_SRC emacs-lisp
;; fudged from https://github.com/atilaneves/cmake-ide/issues/59
(setq cmake-ide-header-search-other-file nil)
(setq cmake-ide-header-search-first-including nil)
#+END_SRC
* Golden Ratio enabling [DISABLED]
#+BEGIN_SRC emacs-lisp
(require 'golden-ratio)

(add-to-list 'golden-ratio-exclude-modes "ediff-mode")
(add-to-list 'golden-ratio-exclude-modes "helm-mode")
(add-to-list 'golden-ratio-exclude-modes "dired-mode")
(add-to-list 'golden-ratio-inhibit-functions 'pl/helm-alive-p)

(defun pl/helm-alive-p ()
  (if (boundp 'helm-alive-p)
      (symbol-value 'helm-alive-p)))

;; do not enable golden-raio in thses modes
(setq golden-ratio-exclude-modes '("ediff-mode"
                                   "gud-mode"
                                   "gdb-locals-mode"
                                   "gdb-registers-mode"
                                   "gdb-breakpoints-mode"
                                   "gdb-threads-mode"
                                   "gdb-frames-mode"
                                   "gdb-inferior-io-mode"
                                   "gud-mode"
                                   "gdb-inferior-io-mode"
                                   "gdb-disassembly-mode"
                                   "gdb-memory-mode"
                                   "magit-log-mode"
                                   "magit-reflog-mode"
                                   "magit-status-mode"
                                   "IELM"
                                   "eshell-mode" "dired-mode"))

;; disabling golden ratio
;; (golden-ratio-mode)
#+END_SRC

#+RESULTS:
: t

* helm-projectile integration
#+BEGIN_SRC emacs-lisp
(require 'helm-projectile)
(helm-projectile-on)
#+END_SRC
* Google Style guide integration
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-common-hook 'google-set-c-style)
#+END_SRC
* Google Style Guide flymake integration
#+BEGIN_SRC emacs-lisp
(require 'flymake-google-cpplint)
(add-hook 'c++-mode-hook 'flymake-google-cpplint-load)
#+END_SRC
* flymake cpp check integration
#+BEGIN_SRC emacs-lisp
(require 'flymake-cppcheck)
(add-hook 'c-mode-hook 'flymake-cppcheck-load)
(add-hook 'c++-mode-hook 'flymake-cppcheck-load)
#+END_SRC
* Emacs CMake project mode
#+BEGIN_SRC emacs-lisp
;; for integration with emacs build system
(require 'cmake-project)
(defun maybe-cmake-project-hook ()
  (if (file-exists-p "CMakeLists.txt") (cmake-project-mode)))
(add-hook 'c-mode-hook 'maybe-cmake-project-hook)
(add-hook 'c++-mode-hook 'maybe-cmake-project-hook)
#+END_SRC
* CMake mode for emacs
#+BEGIN_SRC emacs-lisp
;; CMake syntax highlighting
 (setq load-path (cons (expand-file-name "/dir/with/cmake-mode") load-path))
 (require 'cmake-mode)
#+END_SRC
* NOT WORKING Copy while line to paste in next
#+BEGIN_SRC emacs-lisp
;; Source https://www.emacswiki.org/emacs/CopyingWholeLines
(defun quick-copy-line ()
      "Copy the whole line that point is on and move to the beginning of the next line.
    Consecutive calls to this command append each line to the
    kill-ring."
      (interactive)
      (let ((beg (line-beginning-position 1))
            (end (line-beginning-position 2)))
        (if (eq last-command 'quick-copy-line)
            (kill-append (buffer-substring beg end) (< end beg))
          (kill-new (buffer-substring beg end))))
      (beginning-of-line 2))
(global-set-key (kbd "C-x C-g C-p") 'next-line)
#+END_SRC
* Org-mode latex integration
#+BEGIN_SRC emacs-lisp 
(require 'ox-latex)
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))
(add-to-list 'org-latex-classes
             '("article"
               "\\documentclass{article}"
(add-to-list 'org-latex-classes
             `("book"
               "\\documentclass{book}"
               ("\\part{%s}" . "\\part*{%s}")
               ("\\chapter{%s}" . "\\chapter*{%s}")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
             )               ("\\section{%s}" . "\\section*{%s}")))
(with-eval-after-load "ox-latex"
(add-to-list 'org-latex-classes
          '("koma-article"
             "\\documentclass{scrartcl}"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
(with-eval-after-load "ox-latex"
(add-to-list 'org-latex-classes
          '("koma-report"
             "\\documentclass{scrreprt}"
             ("\\chapter{%s}" . "\\chapter*{%s}")
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

(with-eval-after-load "ox-latex"
(add-to-list 'org-latex-classes
      '("org-article"
         "\\documentclass{org-article}
         [NO-DEFAULT-PACKAGES]
         [PACKAGES]
         [EXTRA]"
         ("\\section{%s}" . "\\section*{%s}")
         ("\\subsection{%s}" . "\\subsection*{%s}")
         ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
         ("\\paragraph{%s}" . "\\paragraph*{%s}")
         ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

#+END_SRC
* Initial buffer choice
#+BEGIN_SRC emacs-lisp

#+END_SRC
* yasnippet config
#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(yas-global-mode 1)
#+END_SRC
* rosemacs
#+BEGIN_SRC emacs-lisp
;; (add-to-list 'load-path "/opt/ros/lunar/share/emacs/site-lisp")
   ;; or whatever your install space is + "/share/emacs/site-lisp"
;; (require 'rosemacs-config)
#+END_SRC
* smart-mode-line with powerline theme
#+BEGIN_SRC emacs-lisp
;; These two lines are just examples
(setq sml/no-confirm-load-theme t)
(setq powerline-arrow-shape 'curve)
(setq powerline-default-separator-dir '(right . left))
;; These two lines you really need.
(setq sml/theme 'powerline)
(sml/setup)
#+END_SRC

#+RESULTS:
: t

* Anaconda-mode
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'anaconda-mode)
(add-hook 'python-mode-hook 'anaconda-eldoc-mode)
(eval-after-load "company"
 '(add-to-list 'company-backends '(company-anaconda :with company-capf)))
#+END_SRC

#+RESULTS:
| (company-anaconda :with company-capf) | company-rtags | company-bbdb | company-nxml | company-css | company-eclim | company-semantic | company-clang | company-xcode | company-cmake | company-capf | company-files | (company-dabbrev-code company-gtags company-etags company-keywords) | company-oddmuse | company-dabbrev |

* Buffer Selection
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'bs-show)
#+END_SRC

#+RESULTS:
: bs-show

* icicles
#+BEGIN_SRC emacs-lisp
 (require 'icicles)
#+END_SRC

#+RESULTS:
: icicles

* Disable tooolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

#+RESULTS:

* multiple-cursors
#+BEGIN_SRC emacs-lisp
(require 'multiple-cursors)
;; When you have an active region that spans multiple lines, 
;; the following will add a cursor to each line:
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
;; When you want to add multiple cursors not based on continuous lines, 
;; but based on keywords in the buffer, use:
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC
* pyflakes
#+BEGIN_SRC emacs-lisp
(require 'flycheck-pyflakes)
(add-hook 'python-mode-hook 'flycheck-mode)
;; disable other checkers
(add-to-list 'flycheck-disabled-checkers 'python-flake8)
(add-to-list 'flycheck-disabled-checkers 'python-pylint)
#+END_SRC

#+RESULTS:
| python-pylint | python-flake8 |

* pyenv-mode
#+BEGIN_SRC emacs-lisp
(pyenv-mode)
#+END_SRC

#+RESULTS:
: t

* elpy config
#+BEGIN_SRC emacs-lisp
(when (require 'elpy nil t)
  (elpy-enable))
(setq elpy-rpc-backend "jedi")

#+END_SRC

#+RESULTS:
: jedi

* F6 to load emacs-config.org file
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f6>") (lambda() (interactive)(find-file "~/.emacs.d/emacs-config/emacs-config.org")))
#+END_SRC

#+RESULTS:
| lambda | nil | (interactive) | (find-file ~/.emacs.d/emacs-config/emacs-config.org) |

* pytest
#+BEGIN_SRC emacs-lisp
  (require 'pytest)
#+END_SRC

#+RESULTS:
: pytest
* Python-custom comment block with M-;
#+BEGIN_SRC emacs-lisp
(defun select-current-line ()
  "Select the current line"
  (interactive)
 (beginning-of-line) ; move to end of line
  (set-mark (line-end-position)))
(defun comment-or-uncomment-line-or-region ()
  "comment-or-uncomment-line-or-region"
  (interactive)
(save-excursion (if (region-active-p) (comment-dwim nil)
  (select-current-line) (comment-dwim nil)
  )))
 (eval-after-load "python"
'(define-key python-mode-map (kbd "M-;") #'comment-or-uncomment-line-or-region))

#+END_SRC

#+RESULTS:
: comment-or-uncomment-line-or-region

* magit-status shortcut
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f12>") 'magit-status)
#+END_SRC

#+RESULTS:
: magit-status

* Switch buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f1>")  'mode-line-other-buffer)
#+END_SRC

#+RESULTS:
: mode-line-other-buffer

* EVIL mode
#+BEGIN_SRC emacs-lisp
(require 'evil)
(evil-mode 0)


#+END_SRC

#+RESULTS:

* copy line & key bind to C-x l
#+BEGIN_SRC emacs-lisp
  (defun copy-line (arg)
    "Copy lines (as many as prefix argument) in the kill ring.
      Ease of use features:
      - Move to start of next line.
      - Appends the copy on sequential calls.
      - Use newline as last char even on the last line of the buffer.
      - If region is active, copy its lines."
    (interactive "p")
    (let ((beg (line-beginning-position))
          (end (line-end-position arg)))
      (when mark-active
        (if (> (point) (mark))
            (setq beg (save-excursion (goto-char (mark)) (line-beginning-position)))
          (setq end (save-excursion (goto-char (mark)) (line-end-position)))))
      (if (eq last-command 'copy-line)
          (kill-append (buffer-substring beg end) (< end beg))
        (kill-ring-save beg end)))
    (kill-append "\n" nil)
    (beginning-of-line (or (and arg (1+ arg)) 2))
    (if (and arg (not (= 1 arg))) (message "%d lines copied" arg)))
  (global-set-key (kbd "C-x l") 'copy-line)
#+END_SRC

#+RESULTS:
: copy-line

* clang-format enabling
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path 
"/home/sgj/.emacs.d/elpa/clang-format")
(global-set-key [C-i] 'clang-format-region)

#+END_SRC

#+RESULTS:
: clang-format-region

* Emacs Code Browser (ECB)
#+BEGIN_SRC emacs-lisp
 (add-to-list 'load-path 
 "/home/sgj/.emacs.d/elpa/ecb-master")
 (require 'ecb)

(setq semantic-load-turn-everything-on t)
(require 'semantic)
;; (global-semantic-show-dirty-mode -1)
;; (global-semantic-show-unmatched-syntax-mode -1)

;; ECB mini buffer completion not working fix - 
;; https://github.com/ecb-home/ecb/issues/10
(defun display-buffer-at-bottom--display-buffer-at-bottom-around (orig-fun &rest args)
"Bugfix for ECB: cannot use display-buffer-at-bottom', calldisplay-buffer-use-some-window' instead in ECB frame."
(if (and ecb-minor-mode (equal (selected-frame) ecb-frame))
(apply 'display-buffer-use-some-window args)
(apply orig-fun args)))
(advice-add 'display-buffer-at-bottom :around #'display-buffer-at-bottom--display-buffer-at-bottom-around)

#+END_SRC

#+RESULTS:

* C++ coding style
#+BEGIN_SRC emacs-lisp

;; C++ coding style
(setq
 c-default-style "ellemtel" ;; set style to "linux"
 )

;; automatically indent when press RET
(global-set-key (kbd "RET") 'newline-and-indent)

;; activate whitespace-mode to view all whitespace characters
(global-set-key (kbd "C-c w") 'whitespace-mode)

;; show unncessary whitespace that can mess up your diff
(add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 1)))

;; use space to indent by default
(setq-default indent-tabs-mode nil)

;; set appearance of a tab that is represented by 4 spaces
(setq-default tab-width 4)

;; Package: clean-aindent-mode
(require 'clean-aindent-mode)
(add-hook 'prog-mode-hook 'clean-aindent-mode)
(defun my-pkg-init()
   (electric-indent-mode -1)  ; no electric indent, auto-indent is sufficient
   (clean-aindent-mode t)
   (setq clean-aindent-is-simple-indent t)
   (define-key global-map (kbd "RET") 'newline-and-indent))
(add-hook 'after-init-hook 'my-pkg-init)

#+END_SRC

#+RESULTS:
| my-pkg-init | x-wm-set-size-hint | global-company-mode |

