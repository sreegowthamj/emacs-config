* AUCTex Config
#+BEGIN_SRC emacs-lisp
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
(setq TeX-PDF-mode t)
#+END_SRC

#+RESULTS:
: t

* Adding Melpa 
#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
;;(package-refresh-contents)
#+END_SRC

#+RESULTS:

* RTAGS Integration
#+BEGIN_SRC emacs-lisp
;; SOURCE - http://syamajala.github.io/c-ide.html
(require 'rtags)
(require 'company-rtags)

(setq rtags-completions-enabled t)
(eval-after-load 'company
  '(add-to-list
    'company-backends 'company-rtags))
(setq rtags-autostart-diagnostics t)
(rtags-enable-standard-keybindings)
#+END_SRC

#+RESULTS:
: rtags-location-stack-visualize

* Helm Integration
#+BEGIN_SRC emacs-lisp
;; SOURCE - http://syamajala.github.io/c-ide.html
(require 'helm-rtags)
(setq rtags-use-helm t)
#+END_SRC
* cmake-ide integration
#+BEGIN_SRC emacs-lisp
(cmake-ide-setup)
#+END_SRC

* irony-mode integration
#+BEGIN_SRC emacs-lisp
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)

(defun my-irony-mode-hook ()
  (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async))

(add-hook 'irony-mode-hook 'my-irony-mode-hook)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
#+END_SRC

#+RESULTS:
| irony-cdb-autosetup-compile-options | my-irony-mode-hook |

* initialising company
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

#+RESULTS:
| global-company-mode | x-wm-set-size-hint | debian-ispell-set-default-dictionary | debian-ispell-set-startup-menu |

* company-irony TAB completion
#+BEGIN_SRC emacs-lisp
(setq company-idle-delay 0)
(define-key c-mode-map [(tab)] 'company-complete)
(define-key c++-mode-map [(tab)] 'company-complete)
#+END_SRC

#+RESULTS:
: company-complete

* Flycheck - syntax checking
#+BEGIN_SRC emacs-lisp
;; source - http://nilsdeppe.com/posts/emacs-c++-ide
;; Require flycheck to be present
(require 'flycheck)
;; Force flycheck to always use c++11 support. We use
;; the clang language backend so this is set to clang
(add-hook 'c++-mode-hook
          (lambda () (setq flycheck-clang-language-standard "c++11")))
;; Turn flycheck on everywhere
(global-flycheck-mode)

;; Use flycheck-pyflakes for python. Seems to work a little better.
;; (require 'flycheck-pyflakes)
(add-hook 'c-mode-hook 'flycheck-mode)
#+END_SRC

#+RESULTS:
| flycheck-mode | irony-mode | (lambda nil (easy-menu-add-item nil (quote (C)) (rtags-submenu-list))) |

* Integrating rtags with flycheck
#+BEGIN_SRC emacs-lisp
(require 'flycheck-rtags)
(defun my-flycheck-rtags-setup ()
  (flycheck-select-checker 'rtags)
  (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
  (setq-local flycheck-check-syntax-automatically nil))
;; c-mode-common-hook is also called by c++-mode
(add-hook 'c-mode-common-hook #'my-flycheck-rtags-setup)
#+END_SRC

#+RESULTS:
| my-flycheck-rtags-setup | google-set-c-style |

* Integrating irony with flycheck
#+BEGIN_SRC emacs-lisp
(eval-after-load 'flycheck
  '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
#+END_SRC

#+RESULTS:
| flycheck-irony-setup | flycheck-mode-set-explicitly |

* CMake automation with cmake-ide
#+BEGIN_SRC emacs-lisp
(cmake-ide-setup)
#+END_SRC

#+RESULTS:
| cmake-ide--before-save |

* Adding monokai (similar to sublime)
#+BEGIN_SRC emacs-lisp
(load-theme 'monokai-alt t)
#+END_SRC 
* Projectile
#+BEGIN_SRC emacs-lisp 
(projectile-global-mode)
(setq projectile-completion-system 'helm)
(helm-projectile-on)
#+END_SRC
* Projectile with speedbar
#+BEGIN_SRC emacs-lisp 
(require 'projectile-speedbar)
#+END_SRC
* Neotree project browser
#+BEGIN_SRC emacs-lisp 
(require 'neotree)
#+END_SRC
* Neotree Projectile Integration
#+BEGIN_SRC emacs-lisp
  (defun neotree-project-dir ()
    "Open NeoTree using the git root."
    (interactive)
    (let ((project-dir (projectile-project-root))
          (file-name (buffer-file-name)))
      (neotree-toggle)
      (if project-dir
          (if (neo-global--window-exists-p)
              (progn
                (neotree-dir project-dir)
                (neotree-find file-name)))
        (message "Could not find git project root."))))
 (global-set-key [f8] 'neotree-project-dir)
#+END_SRC
* Smart mode-line
#+BEGIN_SRC emacs-lisp 
(add-hook 'after-init-hook 'sml/setup)
#+END_SRC
* magit keyboard shortcuts
#+BEGIN_SRC emacs-lisp 
(global-set-key (kbd "M-g M-s") 'magit-status)
(global-set-key (kbd "M-g M-c") 'magit-checkout)
#+END_SRC
* cmake-ide shortcuts
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c m") 'cmake-ide-compile)
#+END_SRC
* rtags Diagnostics
#+BEGIN_SRC emacs-lisp
(setq rtags-autostart-diagnostics t)
(rtags-diagnostics)
(setq rtags-completions-enabled t)
(rtags-enable-standard-keybindings)
#+END_SRC
* make opening headers fast 
#+BEGIN_SRC emacs-lisp
;; fudged from https://github.com/atilaneves/cmake-ide/issues/59
(setq cmake-ide-header-search-other-file nil)
(setq cmake-ide-header-search-first-including nil)
#+END_SRC
* Golden Ratio enabling
#+BEGIN_SRC emacs-lisp
(require 'golden-ratio)

(add-to-list 'golden-ratio-exclude-modes "ediff-mode")
(add-to-list 'golden-ratio-exclude-modes "helm-mode")
(add-to-list 'golden-ratio-exclude-modes "dired-mode")
(add-to-list 'golden-ratio-inhibit-functions 'pl/helm-alive-p)

(defun pl/helm-alive-p ()
  (if (boundp 'helm-alive-p)
      (symbol-value 'helm-alive-p)))

;; do not enable golden-raio in thses modes
(setq golden-ratio-exclude-modes '("ediff-mode"
                                   "gud-mode"
                                   "gdb-locals-mode"
                                   "gdb-registers-mode"
                                   "gdb-breakpoints-mode"
                                   "gdb-threads-mode"
                                   "gdb-frames-mode"
                                   "gdb-inferior-io-mode"
                                   "gud-mode"
                                   "gdb-inferior-io-mode"
                                   "gdb-disassembly-mode"
                                   "gdb-memory-mode"
                                   "magit-log-mode"
                                   "magit-reflog-mode"
                                   "magit-status-mode"
                                   "IELM"
                                   "eshell-mode" "dired-mode"))

(golden-ratio-mode)
#+END_SRC
* helm-projectile integration
#+BEGIN_SRC emacs-lisp
(require 'helm-projectile)
(helm-projectile-on)
#+END_SRC
* Google Style guide integration
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-common-hook 'google-set-c-style)
#+END_SRC
* Google Style Guide flymake integration
#+BEGIN_SRC emacs-lisp
(require 'flymake-google-cpplint)
(add-hook 'c++-mode-hook 'flymake-google-cpplint-load)
#+END_SRC
* flymake cpp check integration
#+BEGIN_SRC emacs-lisp
(require 'flymake-cppcheck)
(add-hook 'c-mode-hook 'flymake-cppcheck-load)
(add-hook 'c++-mode-hook 'flymake-cppcheck-load)
#+END_SRC
* Emacs CMake project mode
#+BEGIN_SRC emacs-lisp
;; for integration with emacs build system
(require 'cmake-project)
(defun maybe-cmake-project-hook ()
  (if (file-exists-p "CMakeLists.txt") (cmake-project-mode)))
(add-hook 'c-mode-hook 'maybe-cmake-project-hook)
(add-hook 'c++-mode-hook 'maybe-cmake-project-hook)
#+END_SRC
* CMake mode for emacs
#+BEGIN_SRC emacs-lisp
;; CMake syntax highlighting
 (setq load-path (cons (expand-file-name "/dir/with/cmake-mode") load-path))
 (require 'cmake-mode)
#+END_SRC
* NOT WORKING Copy while line to paste in next
#+BEGIN_SRC emacs-lisp
;; Source https://www.emacswiki.org/emacs/CopyingWholeLines
(defun quick-copy-line ()
      "Copy the whole line that point is on and move to the beginning of the next line.
    Consecutive calls to this command append each line to the
    kill-ring."
      (interactive)
      (let ((beg (line-beginning-position 1))
            (end (line-beginning-position 2)))
        (if (eq last-command 'quick-copy-line)
            (kill-append (buffer-substring beg end) (< end beg))
          (kill-new (buffer-substring beg end))))
      (beginning-of-line 2))
(global-set-key (kbd "C-x C-g C-p") 'next-line)
#+END_SRC
* Org-mode latex integration
#+BEGIN_SRC emacs-lisp 
(require 'org-latex)
(unless (boundp 'org-export-latex-classes)
  (setq org-export-latex-classes nil))
(add-to-list 'org-export-latex-classes
             '("article"
               "\\documentclass{article}"
               ("\\section{%s}" . "\\section*{%s}")))
#+END_SRC
