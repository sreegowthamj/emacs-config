* AUCTex Config
#+BEGIN_SRC emacs-lisp
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
(setq TeX-PDF-mode t)
#+END_SRC
* Adding Melpa 
#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
;;(package-refresh-contents)
#+END_SRC
* Google Style
#+BEGIN_SRC emacs-lisp
;;(add-hook 'c-mode-common-hook 'google-set-c-style)
#+END_SRC
* RTAGS Integration
#+BEGIN_SRC emacs-lisp
;; SOURCE - http://syamajala.github.io/c-ide.html
(require 'rtags)
(require 'company-rtags)

(setq rtags-completions-enabled t)
(eval-after-load 'company
  '(add-to-list
    'company-backends 'company-rtags))
(setq rtags-autostart-diagnostics t)
(rtags-enable-standard-keybindings)
#+END_SRC

#+RESULTS:
: rtags-location-stack-visualize

* Helm Integration
#+BEGIN_SRC emacs-lisp
;; SOURCE - http://syamajala.github.io/c-ide.html
(require 'helm-rtags)
(setq rtags-use-helm t)
#+END_SRC
* cmake-ide integration
#+BEGIN_SRC emacs-lisp
(cmake-ide-setup)
#+END_SRC

* irony-mode integration
#+BEGIN_SRC emacs-lisp
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)

(defun my-irony-mode-hook ()
  (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async))

(add-hook 'irony-mode-hook 'my-irony-mode-hook)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
#+END_SRC

#+RESULTS:
| irony-cdb-autosetup-compile-options | my-irony-mode-hook |

* initialising company
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

#+RESULTS:
| global-company-mode | x-wm-set-size-hint | debian-ispell-set-default-dictionary | debian-ispell-set-startup-menu |

* company-irony
* company-irony TAB completion
#+BEGIN_SRC emacs-lisp
(setq company-idle-delay 0)
(define-key c-mode-map [(tab)] 'company-complete)
(define-key c++-mode-map [(tab)] 'company-complete)
#+END_SRC

#+RESULTS:
: company-complete

* Flycheck - syntax checking
#+BEGIN_SRC emacs-lisp
(add-hook 'c++-mode-hook 'flycheck-mode)
(add-hook 'c-mode-hook 'flycheck-mode)
#+END_SRC

#+RESULTS:
| flycheck-mode | irony-mode | (lambda nil (easy-menu-add-item nil (quote (C)) (rtags-submenu-list))) |

* Integrating rtags with flycheck
#+BEGIN_SRC emacs-lisp
(require 'flycheck-rtags)
(defun my-flycheck-rtags-setup ()
  (flycheck-select-checker 'rtags)
  (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
  (setq-local flycheck-check-syntax-automatically nil))
;; c-mode-common-hook is also called by c++-mode
(add-hook 'c-mode-common-hook #'my-flycheck-rtags-setup)
#+END_SRC

#+RESULTS:
| my-flycheck-rtags-setup | google-set-c-style |

* Integrating irony with flycheck
#+BEGIN_SRC emacs-lisp
(eval-after-load 'flycheck
  '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
#+END_SRC

#+RESULTS:
| flycheck-irony-setup | flycheck-mode-set-explicitly |

* CMake automation with cmake-ide
#+BEGIN_SRC emacs-lisp
(cmake-ide-setup)
#+END_SRC

#+RESULTS:
| cmake-ide--before-save |

* Adding monokai (similar to sublime)
#+BEGIN_SRC emacs-lisp
(load-theme 'monokai-alt t)
#+END_SRC
